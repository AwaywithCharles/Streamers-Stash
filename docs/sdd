# Streamer's Stash: Inventory Management System

## 1. System Architecture:

- **Backend**: Django (with PostgreSQL)
- **Frontend**: React (web/desktop), React Native (mobile later)
- **Hosting**: Self-hosted on a zimaboard
- **API**: Amazon Product Advertising API

## 2. Data Model:

### Product:

- ID: Auto-incremental primary key
- Name: String
- ASIN: Unique Amazon identifier
- Description: Text
- Purchase Date: Date
- Image: ImageField
- Amazon Link: URL
- Status: ChoiceField (on sale, normal)

## 3. Backend Features:

### API Endpoints:

- Add item
- Update item
- Delete item
- List all items
- Query Amazon for item status

### Integration:

- Use Amazon Product Advertising API for item status updates

## 4. Frontend Features:

### GUI/Web Interface:

#### Main Views:

- **Dashboard**: List of all items with status icons
- **Add Item Form**: Fields for adding products
- **Edit Item Form**: Pre-filled form for updating products
- **Delete Confirmation Dialog**

#### Dynamic Features:

- On Sale filter
- Search bar
- Highlight for movers and shakers

## 5. Implementation:

- Set up PostgreSQL database and Django ORM
- Backend development with Django and Django REST framework
- Frontend development with React
- Host and deploy on zimaboard with Nginx and Docker
- Testing: unit, integration, and user acceptance

## 6. Security & Best Practices:

- Secure storage of API keys
- Rate-limiting for API endpoints
- HTTPS for secure connections
- Regular database backups
- Adhere to Django and React security best practices

## 7. Future Enhancements:

- Analytics for product popularity
- Integrate other affiliate platforms
- Recommendations based on trends
